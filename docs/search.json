[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "David Bayot Serrano",
    "section": "",
    "text": "Hola, soy David Bayot\nEsta web sirve para presentar el trabajo final individual para la asignatura “Programación y manejo de datos en la era Del Big Data”, optativa de GECO en la Facultad de Economía de la Universitat de València.\nLa web de la asignatura está aquí y los trabajos de mis compañeros de curso puedes verlos aquí.\nMi trabajo lleva por título : “Análisis del mercado de videojuegos”. El objetivo es ver cómo distintas sagas de videojuegos y consolas han resultado en el mercado.\nEl trabajo puede verse aquí."
  },
  {
    "objectID": "my_trabajo_BigData.html",
    "href": "my_trabajo_BigData.html",
    "title": "Análisis del mercado de videojuegos",
    "section": "",
    "text": "Vamos a echar un vistazo al mercado de los videojuegos, basándonos en ventas de distintos juegos, clasificándolos mediante regiones, plataformas, géneros… y a realizar algunas observaciones sobre los juegos del año."
  },
  {
    "objectID": "my_trabajo_BigData.html#intro",
    "href": "my_trabajo_BigData.html#intro",
    "title": "Análisis del mercado de videojuegos",
    "section": "",
    "text": "Vamos a echar un vistazo al mercado de los videojuegos, basándonos en ventas de distintos juegos, clasificándolos mediante regiones, plataformas, géneros… y a realizar algunas observaciones sobre los juegos del año."
  },
  {
    "objectID": "my_trabajo_BigData.html#los-pingüinos-molan",
    "href": "my_trabajo_BigData.html#los-pingüinos-molan",
    "title": "Análisis del mercado de videojuegos",
    "section": "Los pingüinos molan",
    "text": "Los pingüinos molan\nVamos a ver una foto de un pingüinos\n\n\nUn pingüino chulo\n\n\nSí, lo pingüinos molan, así que vamos a poner otra foto de pingüinos que tenemos en nuestro PC pero la vamos a poner en el margen:"
  },
  {
    "objectID": "my_trabajo_BigData.html#algunos-gráficos",
    "href": "my_trabajo_BigData.html#algunos-gráficos",
    "title": "Análisis del mercado de videojuegos",
    "section": "Algunos gráficos",
    "text": "Algunos gráficos\nBueno pues vamos a hacer algún gráfico, pero claro antes he de cargar los paquetes\n\nCódigolibrary(tidyverse)\n\n\nArreglo los datos\n\nCódigo#- cojos datos de pingüinos y arreglo un poco \ndf &lt;- palmerpenguins::penguins %&gt;% \n  dplyr::select(species, bill_depth_mm, body_mass_g) %&gt;% \n  tidyr::drop_na()\n\n\n\nPrimer gráfico\n\nCódigo#- primer gráfico\np &lt;- ggplot(data = df, \n       mapping = aes(x = bill_depth_mm, y = body_mass_g, color = species)) +\n     geom_point()\np\n\n\n\n\n\n\n\nSegundo\n\nCódigo#- segundo gráfico\np &lt;- p + geom_smooth(method = \"lm\", se = FALSE) \n\np\n\n\n\n\n\n\n\nEl último\n\nCódigo#- tercer gráfico\np + geom_smooth(method = \"lm\", se = FALSE, color = \"black\") \n\n\n\n\n\n\n\n\nCon esto acabo mi trabajo para BigData!!\n\n\n\nInformación sobre la sesión\nAbajo muestro mi entorno de trabajo y paquetes utilizados\n\n\n current session info \n\n─ Session info ───────────────────────────────────────────────────────────────\n setting  value\n version  R version 4.3.1 (2023-06-16 ucrt)\n os       Windows 11 x64 (build 22621)\n system   x86_64, mingw32\n ui       RTerm\n language (EN)\n collate  Spanish_Spain.utf8\n ctype    Spanish_Spain.utf8\n tz       Europe/Madrid\n date     2024-01-20\n pandoc   3.1.1 @ C:/Program Files/RStudio/resources/app/bin/quarto/bin/tools/ (via rmarkdown)\n\n─ Packages ───────────────────────────────────────────────────────────────────\n package        * version date (UTC) lib source\n bslib            0.5.1   2023-08-11 [1] CRAN (R 4.3.1)\n cachem           1.0.8   2023-05-01 [1] CRAN (R 4.3.1)\n cellranger       1.1.0   2016-07-27 [1] CRAN (R 4.3.1)\n class            7.3-22  2023-05-03 [2] CRAN (R 4.3.1)\n classInt         0.4-10  2023-09-05 [1] CRAN (R 4.3.1)\n cli              3.6.1   2023-03-23 [1] CRAN (R 4.3.1)\n clipr            0.8.0   2022-02-22 [1] CRAN (R 4.3.1)\n colorspace       2.1-0   2023-01-23 [1] CRAN (R 4.3.1)\n crayon           1.5.2   2022-09-29 [1] CRAN (R 4.3.1)\n data.table       1.14.8  2023-02-17 [1] CRAN (R 4.3.1)\n DBI              1.1.3   2022-06-18 [1] CRAN (R 4.3.1)\n desc             1.4.2   2022-09-08 [1] CRAN (R 4.3.2)\n details          0.3.0   2022-03-27 [1] CRAN (R 4.3.2)\n digest           0.6.33  2023-07-07 [1] CRAN (R 4.3.1)\n dplyr          * 1.1.3   2023-09-03 [1] CRAN (R 4.3.1)\n e1071            1.7-13  2023-02-01 [1] CRAN (R 4.3.1)\n ellipsis         0.3.2   2021-04-29 [1] CRAN (R 4.3.1)\n evaluate         0.22    2023-09-29 [1] CRAN (R 4.3.1)\n fansi            1.0.5   2023-10-08 [1] CRAN (R 4.3.1)\n farver           2.1.1   2022-07-06 [1] CRAN (R 4.3.1)\n fastmap          1.1.1   2023-02-24 [1] CRAN (R 4.3.1)\n flexdashboard  * 0.6.2   2023-08-11 [1] CRAN (R 4.3.2)\n forcats        * 1.0.0   2023-01-29 [1] CRAN (R 4.3.1)\n generics         0.1.3   2022-07-05 [1] CRAN (R 4.3.1)\n gganimate      * 1.0.8   2022-09-08 [1] CRAN (R 4.3.2)\n ggfittext        0.10.1  2023-09-05 [1] CRAN (R 4.3.1)\n ggplot2        * 3.4.4   2023-10-12 [1] CRAN (R 4.3.1)\n ggrepel        * 0.9.4   2023-10-13 [1] CRAN (R 4.3.2)\n ggthemes       * 5.0.0   2023-11-21 [1] CRAN (R 4.3.2)\n glue             1.6.2   2022-02-24 [1] CRAN (R 4.3.1)\n gridBase         0.4-7   2014-02-24 [1] CRAN (R 4.3.2)\n gridExtra        2.3     2017-09-09 [1] CRAN (R 4.3.1)\n gtable           0.3.4   2023-08-21 [1] CRAN (R 4.3.1)\n hms              1.1.3   2023-03-21 [1] CRAN (R 4.3.1)\n htmltools        0.5.6.1 2023-10-06 [1] CRAN (R 4.3.1)\n htmlwidgets      1.6.2   2023-03-17 [1] CRAN (R 4.3.1)\n httpuv           1.6.11  2023-05-11 [1] CRAN (R 4.3.1)\n httr             1.4.7   2023-08-15 [1] CRAN (R 4.3.1)\n igraph           1.5.1   2023-08-10 [1] CRAN (R 4.3.1)\n jquerylib        0.1.4   2021-04-26 [1] CRAN (R 4.3.1)\n jsonlite         1.8.7   2023-06-29 [1] CRAN (R 4.3.1)\n KernSmooth       2.23-21 2023-05-03 [2] CRAN (R 4.3.1)\n knitr            1.45    2023-10-30 [1] CRAN (R 4.3.2)\n labeling         0.4.3   2023-08-29 [1] CRAN (R 4.3.1)\n later            1.3.1   2023-05-02 [1] CRAN (R 4.3.1)\n lattice          0.21-8  2023-04-05 [2] CRAN (R 4.3.1)\n lazyeval         0.2.2   2019-03-15 [1] CRAN (R 4.3.1)\n lifecycle        1.0.4   2023-11-07 [1] CRAN (R 4.3.2)\n lubridate      * 1.9.3   2023-09-27 [1] CRAN (R 4.3.1)\n magick           2.8.1   2023-10-22 [1] CRAN (R 4.3.1)\n magrittr         2.0.3   2022-03-30 [1] CRAN (R 4.3.1)\n Matrix           1.6-1.1 2023-09-18 [1] CRAN (R 4.3.1)\n mgcv             1.8-42  2023-03-02 [2] CRAN (R 4.3.1)\n mime             0.12    2021-09-28 [1] CRAN (R 4.3.0)\n munsell          0.5.0   2018-06-12 [1] CRAN (R 4.3.1)\n nlme             3.1-162 2023-01-31 [2] CRAN (R 4.3.1)\n palmerpenguins   0.1.1   2022-08-15 [1] CRAN (R 4.3.1)\n pillar           1.9.0   2023-03-22 [1] CRAN (R 4.3.1)\n pkgconfig        2.0.3   2019-09-22 [1] CRAN (R 4.3.1)\n plotly         * 4.10.3  2023-10-21 [1] CRAN (R 4.3.2)\n png              0.1-8   2022-11-29 [1] CRAN (R 4.3.0)\n prettyunits      1.2.0   2023-09-24 [1] CRAN (R 4.3.1)\n progress         1.2.2   2019-05-16 [1] CRAN (R 4.3.1)\n promises         1.2.1   2023-08-10 [1] CRAN (R 4.3.1)\n proxy            0.4-27  2022-06-09 [1] CRAN (R 4.3.1)\n purrr          * 1.0.2   2023-08-10 [1] CRAN (R 4.3.1)\n R6               2.5.1   2021-08-19 [1] CRAN (R 4.3.1)\n RColorBrewer   * 1.1-3   2022-04-03 [1] CRAN (R 4.3.1)\n Rcpp             1.0.11  2023-07-06 [1] CRAN (R 4.3.1)\n readr          * 2.1.4   2023-02-10 [1] CRAN (R 4.3.1)\n readxl         * 1.4.3   2023-07-06 [1] CRAN (R 4.3.1)\n rlang            1.1.1   2023-04-28 [1] CRAN (R 4.3.1)\n rmarkdown        2.25    2023-09-18 [1] CRAN (R 4.3.1)\n rprojroot        2.0.3   2022-04-02 [1] CRAN (R 4.3.1)\n rstudioapi       0.15.0  2023-07-07 [1] CRAN (R 4.3.1)\n sass             0.4.7   2023-07-15 [1] CRAN (R 4.3.1)\n scales           1.2.1   2022-08-20 [1] CRAN (R 4.3.1)\n sessioninfo      1.2.2   2021-12-06 [1] CRAN (R 4.3.2)\n sf             * 1.0-14  2023-07-11 [1] CRAN (R 4.3.1)\n shiny            1.7.5.1 2023-10-14 [1] CRAN (R 4.3.1)\n stringi          1.7.12  2023-01-11 [1] CRAN (R 4.3.0)\n stringr        * 1.5.0   2022-12-02 [1] CRAN (R 4.3.1)\n tibble         * 3.2.1   2023-03-20 [1] CRAN (R 4.3.1)\n tidyr          * 1.3.0   2023-01-24 [1] CRAN (R 4.3.1)\n tidyselect       1.2.0   2022-10-10 [1] CRAN (R 4.3.1)\n tidyverse      * 2.0.0   2023-02-22 [1] CRAN (R 4.3.2)\n timechange       0.2.0   2023-01-11 [1] CRAN (R 4.3.1)\n treemap        * 2.4-4   2023-05-25 [1] CRAN (R 4.3.2)\n treemapify     * 2.5.6   2023-09-30 [1] CRAN (R 4.3.2)\n tweenr           2.0.2   2022-09-06 [1] CRAN (R 4.3.1)\n tzdb             0.4.0   2023-05-12 [1] CRAN (R 4.3.1)\n units            0.8-4   2023-09-13 [1] CRAN (R 4.3.1)\n utf8             1.2.3   2023-01-31 [1] CRAN (R 4.3.1)\n vctrs            0.6.4   2023-10-12 [1] CRAN (R 4.3.1)\n vembedr        * 0.1.5   2021-12-11 [1] CRAN (R 4.3.2)\n viridis        * 0.6.4   2023-07-22 [1] CRAN (R 4.3.2)\n viridisLite    * 0.4.2   2023-05-02 [1] CRAN (R 4.3.1)\n withr            2.5.2   2023-10-30 [1] CRAN (R 4.3.2)\n xfun             0.40    2023-08-09 [1] CRAN (R 4.3.1)\n xml2             1.3.5   2023-07-06 [1] CRAN (R 4.3.1)\n xtable           1.8-4   2019-04-21 [1] CRAN (R 4.3.1)\n yaml             2.3.7   2023-01-23 [1] CRAN (R 4.3.0)\n\n [1] C:/Users/david/AppData/Local/R/win-library/4.3\n [2] C:/Program Files/R/R-4.3.1/library\n\n──────────────────────────────────────────────────────────────────────────────"
  },
  {
    "objectID": "my_trabajo_BigData.html#datos",
    "href": "my_trabajo_BigData.html#datos",
    "title": "Análisis del mercado de videojuegos",
    "section": "Datos",
    "text": "Datos\n\n\nSobre los datos\nCódigo de los datos\n\n\n\nLos datos utilizados para la realización de este trabajo han sido extraídos de la página Kaggle. Originalmente los iba a extraer de statista, pero para descargarlos satisfactoriamente requería una cuenta de pago, por lo que hay que tirar de lo gratuito, aunque la información de aquí tampoco se queda corta. Han sido cargados de formato csv de aquí: kaggle.\nAdicionalmente, he utilizado datos de un excel de elaboración propia a partir de datos oficiales de los Game Awards, como se puede ver en esta página: thegamer.\n\n\n\nCódigo# A continuación se muestran todos los paquetes utilizados para la realización del trabajo\n\nlibrary(tidyverse)\nlibrary(tidyr)\nlibrary(dplyr)\nlibrary(ggplot2)\nlibrary(gganimate)\nlibrary(ggimage)\nlibrary(readxl)\nlibrary(sf) \nlibrary(ggthemes)\nlibrary(plotly)\nlibrary(viridis) #para mapas\nlibrary(treemap) #para mapas\nlibrary(treemapify) #para mapas\nlibrary(RColorBrewer) #para mapas\nlibrary(stringr) # borrar si no es necesario\nlibrary(ggrepel)\nlibrary(purrr) # borrar si no es necesario\nlibrary(flexdashboard) # borrar si no es necesario\nlibrary(vembedr) \nlibrary(packcircles)\nlibrary(ggiraph)\nlibrary(wordcloud2) \n\n# Ahora cargamos los datos necesarios y los transformamos a dataframes, \n\nventas &lt;- read.csv(\"datos/vgsales.csv\") %&gt;% as.data.frame()\nganadores &lt;- read_excel(\"datos/Gotywinners.xlsx\", col_types = c(\"numeric\", \"text\", \"numeric\"))\n\n# Esta parte del código la usé para que me dejase eliminar los valores NA que no podía suprimir de otro modo\n\n  ventas[ventas == \"N/A\"]  &lt;- NA\n\nventas &lt;- ventas %&gt;%\n  na.omit()"
  },
  {
    "objectID": "my_trabajo_BigData.html#código-de-los-datos",
    "href": "my_trabajo_BigData.html#código-de-los-datos",
    "title": "Análisis del mercado de videojuegos",
    "section": "Código de los datos",
    "text": "Código de los datos\n\nCódigo# A continuación se muestran todos los paquetes utilizados para la realización del trabajo\n\nlibrary(tidyverse)\nlibrary(tidyr)\nlibrary(dplyr)\nlibrary(ggplot2)\nlibrary(gganimate)\nlibrary(readxl)\nlibrary(sf) \nlibrary(ggthemes)\nlibrary(plotly)\nlibrary(viridis) #para mapas\nlibrary(treemap) #para mapas\nlibrary(treemapify) #para mapas\nlibrary(RColorBrewer) #para mapas\nlibrary(stringr) # borrar si no es necesario\nlibrary(ggrepel)\nlibrary(purrr) # borrar si no es necesario\nlibrary(flexdashboard) # borrar si no es necesario\nlibrary(vembedr) \n\n# Ahora cargamos los datos necesarios y los transformamos a dataframes\n\nventas &lt;- read.csv(\"datos/vgsales.csv\") %&gt;% as.data.frame()\nganadores &lt;- read_excel(\"datos/Gotywinners.xlsx\") %&gt;% as.data.frame()"
  },
  {
    "objectID": "my_trabajo_BigData.html#sobre-los-datos",
    "href": "my_trabajo_BigData.html#sobre-los-datos",
    "title": "Análisis del mercado de videojuegos",
    "section": "Sobre los datos",
    "text": "Sobre los datos\nLos datos utilizados para la realización de este trabajo han sido extraídos de la página Kaggle. Originalmente los iba a extraer de statista, pero para descargarlos satisfactoriamente requería una cuenta de pago, por lo que hay que tirar de lo gratuito, aunque la información de aquí tampoco se queda corta. Han sido cargados de formato csv de aquí: kaggle.\nAdicionalmente, he utilizado datos de un excel de elaboración propia a partir de datos oficiales de los Game Awards, como se puede ver en esta página: thegamer."
  },
  {
    "objectID": "my_trabajo_BigData.html#ventas-mundiales",
    "href": "my_trabajo_BigData.html#ventas-mundiales",
    "title": "Análisis del mercado de videojuegos",
    "section": "Ventas mundiales",
    "text": "Ventas mundiales\nLo primero de todo es ver el nivel de ventas del a lo largo del tiempo. Cabe destacar que si bien estos datos no son los más precisos, sí resaltan algunos momentos clave de la industria. Podemos marcar el inicio a finales de los años 70, o en este caso, 1980, con la popularización de la Atari 2600. Por aquel entonces, las consolas solo se veían como juguetes caros, y el consumo de videojuegos no estaba ni de cerca tan extendido como ahora, de ahí que el inicio esté marcado por números pequeños. Podemos observar cómo en 1983 hay un crash, y es que fue cuando se lanzó al mercado del videojuego de “ET el extraterrestre”, el cual, dado el éxito de la película, tuvo un desarrollo muy apresurado, fruto de la confianza en que vendeería bien solo por basarse en la película, por lo que acabó pésimamente programado (no como este trabajo, espero). La pésima recepción del mismo en la consola, que entonces era la dominante, llevó a la crisis del videojuego del 83.\nUna de las anécdotas más conocidas de esta crisis es la del entierro de las copias excedentes de los almacenes en el desierto de Nuevo México. Esto sumado a la escasa reputación del medio llevaron a una situación crítica en la industria, pero en 1985, Nintendo dio con la panacea, el Super Mario Bros. Si bien en 1985 las ventas totales no son tan altas como llegarían a serlo en el futuro, es importante destacar que el grueso de estas fueron únicamente del Super Mario Bros, que estalló en popularidad y, muy probablemente, salvó a la industria de su desaparición.\nA partir de ahí habría años mejores y peores, pero en general, el mercado crecía cada año más y más. El pico mostrado en estos datos en 2008 se debe, probablemente, al lanzamiento de consolas como la Nintendo DS, la Nintendo Wii unos pocos años antes, y de la PS2 en el 2000. Esto se debe a los números en ventas que veremos más adelante.\nTras esto, los números decaen, sin embargo esto se debe a una posible falta de datos en la base, pues el mercado ha seguido creciendo desde entonces.\n\n\nGráfico estático\nGráfico artístico\n\n\n\nMediante este gráfico podemos ver lo antes expuesto de manera más clara pero más corriente\n\nCódigo# A partir de aquí todo es retocar el dataframe y crear el gráfico\nventas_tiempo &lt;- ventas %&gt;%\n  select(Year, Global_Sales) %&gt;%\n  group_by(Year) %&gt;%\n  summarise(Ventas_anuales = sum(Global_Sales, na.rm = TRUE)) \n\ng1 &lt;- ggplot(data = ventas_tiempo, aes(x=Year, y=Ventas_anuales)) +\n    geom_line(color = \"green\") +\n    geom_point(color = \"orange\") +\n  labs(x = \"Año\", y = \"Ventas globales\", title = \"Evolución de las ventas totales a nivel mundial\") \n\nggplotly(g1)\n\n\n\n\n\n\n\nSolo es una versión animada del gráfico anterior, pero a la cabeza de este hay una imagen que saqué de internet del protagonista principal de la saga Yakuza, lo cual multiplica su valor por mucho.\n\nCódigo# Establecemos la imagen\nimage_Kiryu &lt;- \"./imagenes/kiryu.jpg\"\n\n# Creamos el gráfico y le aplicamos la animación\ng1 &lt;- ggplot(data = ventas_tiempo, aes(x=Year, y=Ventas_anuales)) +\n    geom_line(color = \"green\") +\n    geom_image(aes(y = Ventas_anuales, image = image_Kiryu)) +\n  scale_x_continuous(breaks = seq(), limits = c(1980, 2020)) + theme_classic() + labs(y = \"Ventas\") +\n  transition_reveal(Year) \n \n\nanimate(g1, width = 400, height = 400, fps = 25, duration = 10, rewind = FALSE)"
  },
  {
    "objectID": "my_trabajo_BigData.html#section",
    "href": "my_trabajo_BigData.html#section",
    "title": "Análisis del mercado de videojuegos",
    "section": "",
    "text": "Información sobre la sesión\nAbajo muestro mi entorno de trabajo y paquetes utilizados\n\n\n current session info \n\n─ Session info ───────────────────────────────────────────────────────────────\n setting  value\n version  R version 4.3.1 (2023-06-16 ucrt)\n os       Windows 11 x64 (build 22621)\n system   x86_64, mingw32\n ui       RTerm\n language (EN)\n collate  Spanish_Spain.utf8\n ctype    Spanish_Spain.utf8\n tz       Europe/Madrid\n date     2024-01-21\n pandoc   3.1.1 @ C:/Program Files/RStudio/resources/app/bin/quarto/bin/tools/ (via rmarkdown)\n\n─ Packages ───────────────────────────────────────────────────────────────────\n package       * version date (UTC) lib source\n bslib           0.5.1   2023-08-11 [1] CRAN (R 4.3.1)\n cachem          1.0.8   2023-05-01 [1] CRAN (R 4.3.1)\n cellranger      1.1.0   2016-07-27 [1] CRAN (R 4.3.1)\n class           7.3-22  2023-05-03 [2] CRAN (R 4.3.1)\n classInt        0.4-10  2023-09-05 [1] CRAN (R 4.3.1)\n cli             3.6.1   2023-03-23 [1] CRAN (R 4.3.1)\n clipr           0.8.0   2022-02-22 [1] CRAN (R 4.3.1)\n colorspace      2.1-0   2023-01-23 [1] CRAN (R 4.3.1)\n crayon          1.5.2   2022-09-29 [1] CRAN (R 4.3.1)\n crosstalk       1.2.0   2021-11-04 [1] CRAN (R 4.3.1)\n data.table      1.14.8  2023-02-17 [1] CRAN (R 4.3.1)\n DBI             1.1.3   2022-06-18 [1] CRAN (R 4.3.1)\n desc            1.4.2   2022-09-08 [1] CRAN (R 4.3.2)\n details         0.3.0   2022-03-27 [1] CRAN (R 4.3.2)\n digest          0.6.33  2023-07-07 [1] CRAN (R 4.3.1)\n dplyr         * 1.1.3   2023-09-03 [1] CRAN (R 4.3.1)\n e1071           1.7-13  2023-02-01 [1] CRAN (R 4.3.1)\n ellipsis        0.3.2   2021-04-29 [1] CRAN (R 4.3.1)\n evaluate        0.22    2023-09-29 [1] CRAN (R 4.3.1)\n fansi           1.0.5   2023-10-08 [1] CRAN (R 4.3.1)\n farver          2.1.1   2022-07-06 [1] CRAN (R 4.3.1)\n fastmap         1.1.1   2023-02-24 [1] CRAN (R 4.3.1)\n flexdashboard * 0.6.2   2023-08-11 [1] CRAN (R 4.3.2)\n forcats       * 1.0.0   2023-01-29 [1] CRAN (R 4.3.1)\n generics        0.1.3   2022-07-05 [1] CRAN (R 4.3.1)\n gganimate     * 1.0.8   2022-09-08 [1] CRAN (R 4.3.2)\n ggfittext       0.10.1  2023-09-05 [1] CRAN (R 4.3.1)\n ggplot2       * 3.4.4   2023-10-12 [1] CRAN (R 4.3.1)\n ggrepel       * 0.9.4   2023-10-13 [1] CRAN (R 4.3.2)\n ggthemes      * 5.0.0   2023-11-21 [1] CRAN (R 4.3.2)\n glue            1.6.2   2022-02-24 [1] CRAN (R 4.3.1)\n gridBase        0.4-7   2014-02-24 [1] CRAN (R 4.3.2)\n gridExtra       2.3     2017-09-09 [1] CRAN (R 4.3.1)\n gtable          0.3.4   2023-08-21 [1] CRAN (R 4.3.1)\n hms             1.1.3   2023-03-21 [1] CRAN (R 4.3.1)\n htmltools       0.5.6.1 2023-10-06 [1] CRAN (R 4.3.1)\n htmlwidgets     1.6.2   2023-03-17 [1] CRAN (R 4.3.1)\n httpuv          1.6.11  2023-05-11 [1] CRAN (R 4.3.1)\n httr            1.4.7   2023-08-15 [1] CRAN (R 4.3.1)\n igraph          1.5.1   2023-08-10 [1] CRAN (R 4.3.1)\n jquerylib       0.1.4   2021-04-26 [1] CRAN (R 4.3.1)\n jsonlite        1.8.7   2023-06-29 [1] CRAN (R 4.3.1)\n KernSmooth      2.23-21 2023-05-03 [2] CRAN (R 4.3.1)\n knitr           1.45    2023-10-30 [1] CRAN (R 4.3.2)\n labeling        0.4.3   2023-08-29 [1] CRAN (R 4.3.1)\n later           1.3.1   2023-05-02 [1] CRAN (R 4.3.1)\n lazyeval        0.2.2   2019-03-15 [1] CRAN (R 4.3.1)\n lifecycle       1.0.4   2023-11-07 [1] CRAN (R 4.3.2)\n lubridate     * 1.9.3   2023-09-27 [1] CRAN (R 4.3.1)\n magick          2.8.1   2023-10-22 [1] CRAN (R 4.3.1)\n magrittr        2.0.3   2022-03-30 [1] CRAN (R 4.3.1)\n mime            0.12    2021-09-28 [1] CRAN (R 4.3.0)\n munsell         0.5.0   2018-06-12 [1] CRAN (R 4.3.1)\n pillar          1.9.0   2023-03-22 [1] CRAN (R 4.3.1)\n pkgconfig       2.0.3   2019-09-22 [1] CRAN (R 4.3.1)\n plotly        * 4.10.3  2023-10-21 [1] CRAN (R 4.3.2)\n png             0.1-8   2022-11-29 [1] CRAN (R 4.3.0)\n prettyunits     1.2.0   2023-09-24 [1] CRAN (R 4.3.1)\n progress        1.2.2   2019-05-16 [1] CRAN (R 4.3.1)\n promises        1.2.1   2023-08-10 [1] CRAN (R 4.3.1)\n proxy           0.4-27  2022-06-09 [1] CRAN (R 4.3.1)\n purrr         * 1.0.2   2023-08-10 [1] CRAN (R 4.3.1)\n R6              2.5.1   2021-08-19 [1] CRAN (R 4.3.1)\n RColorBrewer  * 1.1-3   2022-04-03 [1] CRAN (R 4.3.1)\n Rcpp            1.0.11  2023-07-06 [1] CRAN (R 4.3.1)\n readr         * 2.1.4   2023-02-10 [1] CRAN (R 4.3.1)\n readxl        * 1.4.3   2023-07-06 [1] CRAN (R 4.3.1)\n rlang           1.1.1   2023-04-28 [1] CRAN (R 4.3.1)\n rmarkdown       2.25    2023-09-18 [1] CRAN (R 4.3.1)\n rprojroot       2.0.3   2022-04-02 [1] CRAN (R 4.3.1)\n rstudioapi      0.15.0  2023-07-07 [1] CRAN (R 4.3.1)\n sass            0.4.7   2023-07-15 [1] CRAN (R 4.3.1)\n scales          1.2.1   2022-08-20 [1] CRAN (R 4.3.1)\n sessioninfo     1.2.2   2021-12-06 [1] CRAN (R 4.3.2)\n sf            * 1.0-14  2023-07-11 [1] CRAN (R 4.3.1)\n shiny           1.7.5.1 2023-10-14 [1] CRAN (R 4.3.1)\n stringi         1.7.12  2023-01-11 [1] CRAN (R 4.3.0)\n stringr       * 1.5.0   2022-12-02 [1] CRAN (R 4.3.1)\n tibble        * 3.2.1   2023-03-20 [1] CRAN (R 4.3.1)\n tidyr         * 1.3.0   2023-01-24 [1] CRAN (R 4.3.1)\n tidyselect      1.2.0   2022-10-10 [1] CRAN (R 4.3.1)\n tidyverse     * 2.0.0   2023-02-22 [1] CRAN (R 4.3.2)\n timechange      0.2.0   2023-01-11 [1] CRAN (R 4.3.1)\n treemap       * 2.4-4   2023-05-25 [1] CRAN (R 4.3.2)\n treemapify    * 2.5.6   2023-09-30 [1] CRAN (R 4.3.2)\n tweenr          2.0.2   2022-09-06 [1] CRAN (R 4.3.1)\n tzdb            0.4.0   2023-05-12 [1] CRAN (R 4.3.1)\n units           0.8-4   2023-09-13 [1] CRAN (R 4.3.1)\n utf8            1.2.3   2023-01-31 [1] CRAN (R 4.3.1)\n vctrs           0.6.4   2023-10-12 [1] CRAN (R 4.3.1)\n vembedr       * 0.1.5   2021-12-11 [1] CRAN (R 4.3.2)\n viridis       * 0.6.4   2023-07-22 [1] CRAN (R 4.3.2)\n viridisLite   * 0.4.2   2023-05-02 [1] CRAN (R 4.3.1)\n withr           2.5.2   2023-10-30 [1] CRAN (R 4.3.2)\n xfun            0.40    2023-08-09 [1] CRAN (R 4.3.1)\n xml2            1.3.5   2023-07-06 [1] CRAN (R 4.3.1)\n xtable          1.8-4   2019-04-21 [1] CRAN (R 4.3.1)\n yaml            2.3.7   2023-01-23 [1] CRAN (R 4.3.0)\n\n [1] C:/Users/david/AppData/Local/R/win-library/4.3\n [2] C:/Program Files/R/R-4.3.1/library\n\n──────────────────────────────────────────────────────────────────────────────"
  },
  {
    "objectID": "my_trabajo_BigData.html#top-10-juegos",
    "href": "my_trabajo_BigData.html#top-10-juegos",
    "title": "Análisis del mercado de videojuegos",
    "section": "Top 10 juegos",
    "text": "Top 10 juegos\nInformación sobre la sesión\nAbajo muestro mi entorno de trabajo y paquetes utilizados\n\n\n current session info \n\n─ Session info ───────────────────────────────────────────────────────────────\n setting  value\n version  R version 4.3.1 (2023-06-16 ucrt)\n os       Windows 11 x64 (build 22621)\n system   x86_64, mingw32\n ui       RTerm\n language (EN)\n collate  Spanish_Spain.utf8\n ctype    Spanish_Spain.utf8\n tz       Europe/Madrid\n date     2024-01-21\n pandoc   3.1.1 @ C:/Program Files/RStudio/resources/app/bin/quarto/bin/tools/ (via rmarkdown)\n\n─ Packages ───────────────────────────────────────────────────────────────────\n package       * version date (UTC) lib source\n bslib           0.5.1   2023-08-11 [1] CRAN (R 4.3.1)\n cachem          1.0.8   2023-05-01 [1] CRAN (R 4.3.1)\n cellranger      1.1.0   2016-07-27 [1] CRAN (R 4.3.1)\n class           7.3-22  2023-05-03 [2] CRAN (R 4.3.1)\n classInt        0.4-10  2023-09-05 [1] CRAN (R 4.3.1)\n cli             3.6.1   2023-03-23 [1] CRAN (R 4.3.1)\n clipr           0.8.0   2022-02-22 [1] CRAN (R 4.3.1)\n colorspace      2.1-0   2023-01-23 [1] CRAN (R 4.3.1)\n crayon          1.5.2   2022-09-29 [1] CRAN (R 4.3.1)\n crosstalk       1.2.0   2021-11-04 [1] CRAN (R 4.3.1)\n data.table      1.14.8  2023-02-17 [1] CRAN (R 4.3.1)\n DBI             1.1.3   2022-06-18 [1] CRAN (R 4.3.1)\n desc            1.4.2   2022-09-08 [1] CRAN (R 4.3.2)\n details         0.3.0   2022-03-27 [1] CRAN (R 4.3.2)\n digest          0.6.33  2023-07-07 [1] CRAN (R 4.3.1)\n dplyr         * 1.1.3   2023-09-03 [1] CRAN (R 4.3.1)\n e1071           1.7-13  2023-02-01 [1] CRAN (R 4.3.1)\n ellipsis        0.3.2   2021-04-29 [1] CRAN (R 4.3.1)\n evaluate        0.22    2023-09-29 [1] CRAN (R 4.3.1)\n fansi           1.0.5   2023-10-08 [1] CRAN (R 4.3.1)\n farver          2.1.1   2022-07-06 [1] CRAN (R 4.3.1)\n fastmap         1.1.1   2023-02-24 [1] CRAN (R 4.3.1)\n flexdashboard * 0.6.2   2023-08-11 [1] CRAN (R 4.3.2)\n forcats       * 1.0.0   2023-01-29 [1] CRAN (R 4.3.1)\n generics        0.1.3   2022-07-05 [1] CRAN (R 4.3.1)\n gganimate     * 1.0.8   2022-09-08 [1] CRAN (R 4.3.2)\n ggfittext       0.10.1  2023-09-05 [1] CRAN (R 4.3.1)\n ggplot2       * 3.4.4   2023-10-12 [1] CRAN (R 4.3.1)\n ggrepel       * 0.9.4   2023-10-13 [1] CRAN (R 4.3.2)\n ggthemes      * 5.0.0   2023-11-21 [1] CRAN (R 4.3.2)\n glue            1.6.2   2022-02-24 [1] CRAN (R 4.3.1)\n gridBase        0.4-7   2014-02-24 [1] CRAN (R 4.3.2)\n gridExtra       2.3     2017-09-09 [1] CRAN (R 4.3.1)\n gtable          0.3.4   2023-08-21 [1] CRAN (R 4.3.1)\n hms             1.1.3   2023-03-21 [1] CRAN (R 4.3.1)\n htmltools       0.5.6.1 2023-10-06 [1] CRAN (R 4.3.1)\n htmlwidgets     1.6.2   2023-03-17 [1] CRAN (R 4.3.1)\n httpuv          1.6.11  2023-05-11 [1] CRAN (R 4.3.1)\n httr            1.4.7   2023-08-15 [1] CRAN (R 4.3.1)\n igraph          1.5.1   2023-08-10 [1] CRAN (R 4.3.1)\n jquerylib       0.1.4   2021-04-26 [1] CRAN (R 4.3.1)\n jsonlite        1.8.7   2023-06-29 [1] CRAN (R 4.3.1)\n KernSmooth      2.23-21 2023-05-03 [2] CRAN (R 4.3.1)\n knitr           1.45    2023-10-30 [1] CRAN (R 4.3.2)\n labeling        0.4.3   2023-08-29 [1] CRAN (R 4.3.1)\n later           1.3.1   2023-05-02 [1] CRAN (R 4.3.1)\n lazyeval        0.2.2   2019-03-15 [1] CRAN (R 4.3.1)\n lifecycle       1.0.4   2023-11-07 [1] CRAN (R 4.3.2)\n lubridate     * 1.9.3   2023-09-27 [1] CRAN (R 4.3.1)\n magick          2.8.1   2023-10-22 [1] CRAN (R 4.3.1)\n magrittr        2.0.3   2022-03-30 [1] CRAN (R 4.3.1)\n mime            0.12    2021-09-28 [1] CRAN (R 4.3.0)\n munsell         0.5.0   2018-06-12 [1] CRAN (R 4.3.1)\n pillar          1.9.0   2023-03-22 [1] CRAN (R 4.3.1)\n pkgconfig       2.0.3   2019-09-22 [1] CRAN (R 4.3.1)\n plotly        * 4.10.3  2023-10-21 [1] CRAN (R 4.3.2)\n png             0.1-8   2022-11-29 [1] CRAN (R 4.3.0)\n prettyunits     1.2.0   2023-09-24 [1] CRAN (R 4.3.1)\n progress        1.2.2   2019-05-16 [1] CRAN (R 4.3.1)\n promises        1.2.1   2023-08-10 [1] CRAN (R 4.3.1)\n proxy           0.4-27  2022-06-09 [1] CRAN (R 4.3.1)\n purrr         * 1.0.2   2023-08-10 [1] CRAN (R 4.3.1)\n R6              2.5.1   2021-08-19 [1] CRAN (R 4.3.1)\n RColorBrewer  * 1.1-3   2022-04-03 [1] CRAN (R 4.3.1)\n Rcpp            1.0.11  2023-07-06 [1] CRAN (R 4.3.1)\n readr         * 2.1.4   2023-02-10 [1] CRAN (R 4.3.1)\n readxl        * 1.4.3   2023-07-06 [1] CRAN (R 4.3.1)\n rlang           1.1.1   2023-04-28 [1] CRAN (R 4.3.1)\n rmarkdown       2.25    2023-09-18 [1] CRAN (R 4.3.1)\n rprojroot       2.0.3   2022-04-02 [1] CRAN (R 4.3.1)\n rstudioapi      0.15.0  2023-07-07 [1] CRAN (R 4.3.1)\n sass            0.4.7   2023-07-15 [1] CRAN (R 4.3.1)\n scales          1.2.1   2022-08-20 [1] CRAN (R 4.3.1)\n sessioninfo     1.2.2   2021-12-06 [1] CRAN (R 4.3.2)\n sf            * 1.0-14  2023-07-11 [1] CRAN (R 4.3.1)\n shiny           1.7.5.1 2023-10-14 [1] CRAN (R 4.3.1)\n stringi         1.7.12  2023-01-11 [1] CRAN (R 4.3.0)\n stringr       * 1.5.0   2022-12-02 [1] CRAN (R 4.3.1)\n tibble        * 3.2.1   2023-03-20 [1] CRAN (R 4.3.1)\n tidyr         * 1.3.0   2023-01-24 [1] CRAN (R 4.3.1)\n tidyselect      1.2.0   2022-10-10 [1] CRAN (R 4.3.1)\n tidyverse     * 2.0.0   2023-02-22 [1] CRAN (R 4.3.2)\n timechange      0.2.0   2023-01-11 [1] CRAN (R 4.3.1)\n treemap       * 2.4-4   2023-05-25 [1] CRAN (R 4.3.2)\n treemapify    * 2.5.6   2023-09-30 [1] CRAN (R 4.3.2)\n tweenr          2.0.2   2022-09-06 [1] CRAN (R 4.3.1)\n tzdb            0.4.0   2023-05-12 [1] CRAN (R 4.3.1)\n units           0.8-4   2023-09-13 [1] CRAN (R 4.3.1)\n utf8            1.2.3   2023-01-31 [1] CRAN (R 4.3.1)\n vctrs           0.6.4   2023-10-12 [1] CRAN (R 4.3.1)\n vembedr       * 0.1.5   2021-12-11 [1] CRAN (R 4.3.2)\n viridis       * 0.6.4   2023-07-22 [1] CRAN (R 4.3.2)\n viridisLite   * 0.4.2   2023-05-02 [1] CRAN (R 4.3.1)\n withr           2.5.2   2023-10-30 [1] CRAN (R 4.3.2)\n xfun            0.40    2023-08-09 [1] CRAN (R 4.3.1)\n xml2            1.3.5   2023-07-06 [1] CRAN (R 4.3.1)\n xtable          1.8-4   2019-04-21 [1] CRAN (R 4.3.1)\n yaml            2.3.7   2023-01-23 [1] CRAN (R 4.3.0)\n\n [1] C:/Users/david/AppData/Local/R/win-library/4.3\n [2] C:/Program Files/R/R-4.3.1/library\n\n──────────────────────────────────────────────────────────────────────────────"
  },
  {
    "objectID": "my_trabajo_BigData.html#top-5-juegos",
    "href": "my_trabajo_BigData.html#top-5-juegos",
    "title": "Análisis del mercado de videojuegos",
    "section": "Top 5 juegos",
    "text": "Top 5 juegos\nVamos a centrarnos ahora en los 5 primeros puestos de la lista en lo que a ventas se refiere. Tal y como muestra este gráfico de barras poco práctico pero bastante chulo, el primer puesto indiscutible se lo lleva Wii Sports, aunque aquí hay algo de trampa, pues en cada Wii se incluía una copia del juego, por lo que si te comprabas una Wii, te comprabas el Wii Sports. En segundo lugar, el Super Mario Bros, y no es para menos, no solo fue un bombazo cuando salió en la Famicom y en la NES, sino que desde entonces ha adquirido un estatus de clásico eterno, entre otras cosas, por salvar a la industria y por ser Super Mario uno de los personajes ficticios más conocidos de la historia. Los otros 3 puestos no tienen historias tan interesantes, pero ahí están.\n\nCódigo# Se crea el dataframe\ntop_5 &lt;- ventas %&gt;%\n  rename(juego = Name, copias = Global_Sales) %&gt;%\n  select(juego, copias) %&gt;%\n  slice_max(copias, n = 5)\n \n# Para hacer un gráfico de barras animado, primero establecemos un estado inicial para el primer frame de la animación, voy a dejar los valores de ventas a 0 para que quede más vistosa la evolución:\na &lt;- data.frame(juego=c(\"Wii Sports\",\"Super Mario Bros\",\"Mario Kart Wii\", \"Wii Sports Resort\", \"Pokemon Red/Blue\"), values=c(0, 0, 0, 0, 0), frame=rep('a',5))\nb &lt;- data.frame(juego=c(\"Wii Sports\",\"Super Mario Bros\",\"Mario Kart Wii\", \"Wii Sports Resort\", \"Pokemon Red/Blue\"), values=c(82.74, 40.24, 35.82, 33.00, 31.37), frame=rep('b',5))\ndata &lt;- rbind(a,b)  \n \n# Ahora establecemos las características de la animación\nggplot(data, aes(x=juego, y=values, fill=juego)) + \n  labs(y = \"Ventas \", title = \"Top 5 en ventas\") +\n  geom_bar(stat='identity') +\n  theme_bw() +\n  transition_states(\n    frame,\n    transition_length = 2,\n    state_length = 2\n  ) +\n  ease_aes('sine-in-out')\n\n# Por último, lo guardamos como gif:\nanim_save(\"./gifs/288-animated-barplot-transition.gif\")"
  },
  {
    "objectID": "my_trabajo_BigData.html#comparación-entre-regiones",
    "href": "my_trabajo_BigData.html#comparación-entre-regiones",
    "title": "Análisis del mercado de videojuegos",
    "section": "Comparación entre regiones",
    "text": "Comparación entre regiones\nAhora vamos a dividir las ventas entre las tres regiones principales: Norteamérica, Europa y . Agruparemos el resto de ventas en una cuarta categoría: otros. Todas las regiones tienen una evolución similar, por lo que son representativas de las ventas a nivel global. Lo más notable es que el mercado más grande ha sido el norteamericano, seguido por el europeo. El mercado japonés es, lógicamente, más pequeño, aunque en ciertos puntos llegó a superar al americano a mediados de los 90. Por último, el resto de regiones confomran la parte minoritaria de las ventas, aunque es curioso que llegasen a superar al mercado japonés en algunos puntos de la primera década de los 2000.\n\nCódigo# Primero se crean los dataframes para las distintas regiones\nventas_eu &lt;- ventas %&gt;% \n  select(Year, EU_Sales) %&gt;%\n  group_by(Year) %&gt;%\n  summarise(eu_Sales = sum(EU_Sales, na.rm = TRUE)) \n\nventas_na &lt;- ventas %&gt;% \n  select(Year, NA_Sales) %&gt;%\n  group_by(Year) %&gt;%\n  summarise(na_Sales = sum(NA_Sales, na.rm = TRUE)) \n\nventas_jp &lt;- ventas %&gt;% \n  select(Year, JP_Sales) %&gt;%\n  group_by(Year) %&gt;%\n  summarise(jp_Sales = sum(JP_Sales, na.rm = TRUE)) \n\nventas_otras &lt;- ventas %&gt;% \n  select(Year, Other_Sales) %&gt;%\n  group_by(Year) %&gt;%\n  summarise(other_Sales = sum(Other_Sales, na.rm = TRUE)) \n\n# Ahora se crea y anima el gráfico\ng2 &lt;- ggplot(data = ventas_eu, aes(x=Year, y=eu_Sales,)) +\n  geom_line(color = \"blue\") + \n  geom_line(data = ventas_na, aes(x=Year, y=na_Sales), color = \"red\") + \n  geom_line(data = ventas_jp, aes(x=Year, y=jp_Sales), color = \"green\") + \n  geom_line(data = ventas_otras, aes(x=Year, y=other_Sales), color = \"purple\") + \n   scale_x_continuous(breaks = seq(), limits = c(1980, 2020)) + theme_classic() + labs(y = \"Ventas\") +\n  transition_reveal(Year) \n \nanimate(g2, width = 400, height = 400, fps = 25, duration = 10, rewind = FALSE)"
  },
  {
    "objectID": "my_trabajo_BigData.html#ventas-por-plataforma",
    "href": "my_trabajo_BigData.html#ventas-por-plataforma",
    "title": "Análisis del mercado de videojuegos",
    "section": "Ventas por plataforma",
    "text": "Ventas por plataforma\nA continuación, veremos las ventas clasificadas por plataformas. Lo primero que se ve es que no parece haber término medio, pues hay muchísimas ventas de juegos en las consolas que más éxito han tenido, mientras que en el resto hay muchísimas menos.\n\nCódigo# Se crea el dataframe\nventas_plataformas &lt;- ventas %&gt;%\n  select(Year, Platform, Global_Sales) %&gt;%\n  group_by(Platform) %&gt;%\n  summarise(ventas_p = sum(Global_Sales, na.rm = TRUE)) \n\n# Se hace el gráfico\ng_p &lt;- ventas_plataformas %&gt;%\n  ggplot(aes(x = Platform, y = ventas_p)) +\n   geom_segment( aes(x= Platform, xend=Platform, y=ventas_p, yend=0), color=\"skyblue\") +\n  labs(x = \"Plataforma\", y = \"Ventas\", title = \"Ventas por plataforma\") +\n  geom_point( color=\"blue\", size=4, alpha=0.6) +\n  theme_light() +\n  coord_flip() +\n  theme(\n    panel.grid.major.y = element_blank(),\n    panel.border = element_blank(),\n    axis.ticks.y = element_blank())\nggplotly(g_p)"
  },
  {
    "objectID": "my_trabajo_BigData.html#juego-del-año",
    "href": "my_trabajo_BigData.html#juego-del-año",
    "title": "Análisis del mercado de videojuegos",
    "section": "Juego del Año",
    "text": "Juego del Año\nPasamos a los ganadores del premio “Juego del Año (GOTY)\n\n\nGOTY de cada año\nJuegos del año\nRecomendación\n\n\n\nVamos a repasar qué juego ganó la categoría de Game of the Year cada año desde 2014 hasta 2023. Ya había juegos del año antes de 2014, pero fue ese año cuando se fundaron los Game Awards, y para el caso, vamos a tomar solo estos en consideración.\n\nCódigo# Se seleccionan juegos y el año de cada uno\ngotys_year &lt;- ganadores %&gt;%\n  select(Year, Game)\n\n# Se presenta en tabla\ndatatable(gotys_year)\n\n\n\n\n\n\n\n\nPara acabar, vamos a ver qué peso ha tenido cada juego del año en términos de ventas. Los dos más grandes en este aspecto han sido The Witcher 3 y Overwatch, que en su día estaban hasta en la sopa.\n\nCódigogotys &lt;- ganadores %&gt;%\n  select(Game, Copies)\n\n# Determinamos los datos del treemap\nGame &lt;- c(\"Dragon Age: Inquisition\", \"The Witcher 3: Wild Hunt\", \"Overwatch\", \n\"The Legend of Zelda: Breath of the wild\", \"God of War (2018)\", \"Sekiro: Shadows die twice\", \n\"The last of us Part 2\", \"It takes two\", \"Elden Ring\", \"Baldur's Gate 3\")\nCopies &lt;- c(6000000, 40000000, 50000000, 31150000, 23000000, 10000000, 10000000, 10000000, 20000000, 27000000)\ndata &lt;- data.frame(Game,Copies)\n \n# Se crea el treemap\nt_goty &lt;- treemap(data,\n            index=\"Game\",\n            vSize=\"Copies\",\n            type=\"index\"\n            )\n\nt_goty\n#&gt; $tm\n#&gt;                                       Game    vSize vColor   stdErr vColorValue\n#&gt; 1                          Baldur's Gate 3 27000000      1 27000000          NA\n#&gt; 2                  Dragon Age: Inquisition  6000000      1  6000000          NA\n#&gt; 3                               Elden Ring 20000000      1 20000000          NA\n#&gt; 4                        God of War (2018) 23000000      1 23000000          NA\n#&gt; 5                             It takes two 10000000      1 10000000          NA\n#&gt; 6                                Overwatch 50000000      1 50000000          NA\n#&gt; 7                Sekiro: Shadows die twice 10000000      1 10000000          NA\n#&gt; 8                    The last of us Part 2 10000000      1 10000000          NA\n#&gt; 9  The Legend of Zelda: Breath of the wild 31150000      1 31150000          NA\n#&gt; 10                The Witcher 3: Wild Hunt 40000000      1 40000000          NA\n#&gt;    level        x0        y0         w         h   color\n#&gt; 1      1 0.7196522 0.5760117 0.2803478 0.4239883 #D6A166\n#&gt; 2      1 0.8968214 0.0000000 0.1031786 0.2560052 #50B6E0\n#&gt; 3      1 0.3962140 0.0000000 0.3286430 0.2679124 #2DC194\n#&gt; 4      1 0.3962140 0.2679124 0.3286430 0.3080993 #EB8DC1\n#&gt; 5      1 0.7248570 0.2560052 0.1375715 0.3200065 #B2AF4F\n#&gt; 6      1 0.0000000 0.4444444 0.3962140 0.5555556 #A1A5EC\n#&gt; 7      1 0.8624285 0.2560052 0.1375715 0.3200065 #00C0C0\n#&gt; 8      1 0.7248570 0.0000000 0.1719644 0.2560052 #EA9494\n#&gt; 9      1 0.3962140 0.5760117 0.3234383 0.4239883 #7EBA68\n#&gt; 10     1 0.0000000 0.0000000 0.3962140 0.4444444 #D494E1\n#&gt; \n#&gt; $type\n#&gt; [1] \"index\"\n#&gt; \n#&gt; $vSize\n#&gt; [1] \"Copies\"\n#&gt; \n#&gt; $vColor\n#&gt; [1] NA\n#&gt; \n#&gt; $stdErr\n#&gt; [1] \"Copies\"\n#&gt; \n#&gt; $algorithm\n#&gt; [1] \"pivotSize\"\n#&gt; \n#&gt; $vpCoorX\n#&gt; [1] 0.02812148 0.97187852\n#&gt; \n#&gt; $vpCoorY\n#&gt; [1] 0.01968504 0.91031496\n#&gt; \n#&gt; $aspRatio\n#&gt; [1] 1.483512\n#&gt; \n#&gt; $range\n#&gt; [1] NA\n#&gt; \n#&gt; $mapping\n#&gt; [1] NA NA NA\n#&gt; \n#&gt; $draw\n#&gt; [1] TRUE\n\n\n\n\n\n\n\n\n\nTanto el GOTY de 2019 como el de 2022 son juegos de From Software, respectivamente. Tengo especial preferencia por los juegos de esta compañía, y aprovecho que han sido juegos del año y figuran aquí para recomendar los dos. Son juegos reconcidos por su elevada dificultad, pero también por la gratidicación que supone completarlos. Dejo por aquí una reseña que vi de Elden Ring hace poco y que creo que puede ser entretenida e informativa."
  },
  {
    "objectID": "my_trabajo_BigData.html#clasificación-por-género",
    "href": "my_trabajo_BigData.html#clasificación-por-género",
    "title": "Análisis del mercado de videojuegos",
    "section": "Clasificación por género",
    "text": "Clasificación por género\nY ahora, por género. No sorprende demasiado ver que los géneros más populares son Acción, Deportes y Shooters, seguidos muy de cerca por juegos de Rol y de Plataformas.\n\n\nNube de palabras\nGráfico de barras\n\n\n\n\nCódigo# Dataframe\nventas_genero &lt;- ventas %&gt;%\n  select(Year, Genre, Global_Sales) %&gt;%\n  group_by(Genre) %&gt;%\n  summarise(ventas_g = sum(Global_Sales, na.rm = TRUE)) \n\n# Con esto se ve en formaro nube de palabras\nwordcloud2(data=ventas_genero, size=0.5)\n\n\n\n\n\n\n\n\nCódigog_g &lt;- ventas_genero %&gt;%\n  ggplot(aes(x=Genre, y=ventas_g, fill=Genre)) + \n  labs(x = \"Ventas\", y = \"Género\", title = \"Ventas por género\") +\n  geom_bar(stat = \"identity\") +\n  coord_flip()\nggplotly(g_g)"
  },
  {
    "objectID": "my_trabajo_BigData.html#nube-de-palabras",
    "href": "my_trabajo_BigData.html#nube-de-palabras",
    "title": "Análisis del mercado de videojuegos",
    "section": "Nube de palabras",
    "text": "Nube de palabras\n\nCódigoventas_genero &lt;- ventas %&gt;%\n  select(Year, Genre, Global_Sales) %&gt;%\n  group_by(Genre) %&gt;%\n  summarise(ventas_g = sum(Global_Sales, na.rm = TRUE)) \n\nwordcloud2(data=ventas_genero, size=0.5)"
  },
  {
    "objectID": "my_trabajo_BigData.html#gráfico-de-barras",
    "href": "my_trabajo_BigData.html#gráfico-de-barras",
    "title": "Análisis del mercado de videojuegos",
    "section": "Gráfico de barras",
    "text": "Gráfico de barras\n\nCódigog_g &lt;- ventas_genero %&gt;%\n  ggplot(aes(x=Genre, y=ventas_g, fill=Genre)) + \n  geom_bar(stat = \"identity\") +\n  coord_flip()\nggplotly(g_g)"
  }
]